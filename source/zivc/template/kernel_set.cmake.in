# file: CMakeLists.txt
# author: Sho Ikeda
#
# Copyright (c) 2015-2022 Sho Ikeda
# This software is released under the MIT License.
# http://opensource.org/licenses/mit-license.php
# 

cmake_minimum_required(VERSION 3.22)


# Global constants
set(kernel_set_prefix kernel_set)
set(zstd_compression_level 19)

# Get absolute pathes of the given kernel files
function(Zivc_getAbsoluteKernelPathes kernel_base_dir absolute_kernel_files)
  set(kernel_files ${ARGN})
  set(files "")
  foreach(kernel_file IN LISTS kernel_files)
    cmake_path(ABSOLUTE_PATH kernel_file
               BASE_DIRECTORY "${kernel_base_dir}"
               NORMALIZE
               OUTPUT_VARIABLE kernel_file_path)
    list(APPEND files ${kernel_file_path})
  endforeach(kernel_file)

  # Output
  set(${absolute_kernel_files} ${files} PARENT_SCOPE)
endfunction(Zivc_getAbsoluteKernelPathes)


# Create a kernels inclusion string
function(Zivc_makeKernelInclusionString kernel_inclusion_lines)
  set(kernel_files ${ARGN})
  set(inclusion_lines "")
  foreach(kernel_file IN LISTS kernel_files)
    string(APPEND inclusion_lines "#include \"${kernel_file}\"\n")
  endforeach(kernel_file)

  # Output
  set(${kernel_inclusion_lines} "${inclusion_lines}" PARENT_SCOPE)
endfunction(Zivc_makeKernelInclusionString)


function(Zivc_initCpuBackend target)
  # Make the output dir for C++ backend
  cmake_path(SET output_dir "${PROJECT_BINARY_DIR}/cpp")
  cmake_path(SET cpp_include_dir "${output_dir}/include")
  set(include_dirs "${cpp_include_dir}" "${kernel_set_include_dirs}")

  Zivc_makeKernelInclusionString(kernel_inclusion_lines ${kernel_set_source_files})

  # Hpp file
  file(MAKE_DIRECTORY "${cpp_include_dir}/zivc/kernel_set")
  cmake_path(SET hpp_file_path "${cpp_include_dir}/zivc/kernel_set/${set_name}.hpp")
  configure_file("@kernel_set_template_dir@/kernel_set.hpp.in"
                 "${hpp_file_path}"
                 @ONLY)
  # Cpp file
  cmake_path(SET cpp_file_path "${output_dir}/${set_name}.cpp")
  configure_file("@kernel_set_template_dir@/kernel_set.cpp.in"
                 "${cpp_file_path}"
                 @ONLY)

  set(cpp_source_files ${hpp_file_path} ${cpp_file_path} ${kernel_set_source_files})
  add_library(${target} STATIC ${cpp_source_files})
  source_group(${target} FILES ${cpp_source_files})

  # Compiler flags
  include("@zivc_path@/cmake/compiler.cmake")
  set_target_properties(${target} PROPERTIES CXX_STANDARD 20
                                             CXX_STANDARD_REQUIRED ON)
  Zivc_getCxxWarningFlags(cxx_compile_warning_flags)
  Zivc_getZivcKernelFlags(zivc_compile_flags zivc_definitions)
  list(APPEND zivc_definitions ZIVC_CL_CPU=1)
  Zivc_getZivcWarningFlags(zivc_warning_flags)
  target_compile_options(${target} PUBLIC ${zivc_compile_flags}
                                   PRIVATE ${cxx_compile_warning_flags}
                                           ${zivc_warning_flags})
  Zivc_checkTarget(Zisc)
  target_link_libraries(${target} PUBLIC Zisc)
  if(ZIVC_BAKE_KERNELS)
    target_link_libraries(${target} PRIVATE libzstd_static)
  endif()
  target_compile_definitions(${target} PUBLIC ${zivc_definitions}
                                              @kernel_set_definitions@) # TODO Should not populate the definitions with public?
  target_include_directories(${target} PUBLIC ${include_dirs})
  Zivc_enableIpo(${target})

  #
  Zivc_setStaticAnalyzer(${target})

  # For LSP
  cmake_path(SET lsp_dir "${PROJECT_BINARY_DIR}/lsp")
  file(MAKE_DIRECTORY "${lsp_dir}")
  set(kernel_set_additional_options ${cxx_compile_warning_flags} ${zivc_warning_flags})
  set(kernel_set_target ${target})
  configure_file("@kernel_set_template_dir@/kernel_set_lsp.cmake.in"
                 "${lsp_dir}/CMakeLists.txt"
                 @ONLY)
  add_subdirectory("${lsp_dir}" "${lsp_dir}/Binary" EXCLUDE_FROM_ALL)
endfunction(Zivc_initCpuBackend)


function(Zivc_findClspv clspv_command)
  if(ZIVC_USES_OWN_CLSPV)
    if(NOT TARGET clspv)
      message(FATAL_ERROR "'clspv' target not found.")
    endif()
    set(__clspv_command clspv)
  else()
    find_program(__clspv_command "clspv"
                 DOC "A compiler for a subset of OpenCL to Vulkan compute shaders.")
    if(NOT __clspv_command)
      message(FATAL_ERROR "'clspv' not found in PATH.") 
    endif()
  endif()

  # Output
  set(${clspv_command} ${__clspv_command} PARENT_SCOPE)
endfunction(Zivc_findClspv)


function(Zivc_findClspvReflection reflection_command)
  if(ZIVC_USES_OWN_CLSPV)
    if(NOT TARGET clspv-reflection)
      message(FATAL_ERROR "'clspv-reflection' target not found.")
    endif()
    set(__reflection_command clspv-reflection)
  else()
    find_program(__reflection_command "clspv-reflection"
                 DOC "A tool reports the descriptor set and bindings.")
    if(NOT __reflection_command)
      message(FATAL_ERROR "'clspv-reflection' not found in PATH.") 
    endif()
  endif()

  # Output
  set(${reflection_command} ${__reflection_command} PARENT_SCOPE)
endfunction(Zivc_findClspvReflection)


function(Zivc_findSpirvOpt spirv_opt_command)
  find_program(__spirv_opt_command "spirv-opt"
               DOC "Optimize a SPIR-V binary file.")
  if(NOT __spirv_opt_command)
    message(FATAL_ERROR "'spirv-opt' not found in PATH.") 
  endif()

  # Output
  set(${spirv_opt_command} ${__spirv_opt_command} PARENT_SCOPE)
endfunction(Zivc_findSpirvOpt)


function(Zivc_findSpirvDis spirv_dis_command)
  find_program(__spirv_dis_command "spirv-dis"
               DOC "Disassemble a SPIR-V binary module.")
  if(NOT __spirv_dis_command)
    message(WARNING "'spirv-dis' not found in PATH.") 
  endif()

  # Output
  set(${spirv_dis_command} ${__spirv_dis_command} PARENT_SCOPE)
endfunction(Zivc_findSpirvDis)


function(Zivc_getClspvCompileFlags clspv_compile_flags)
  set(options -D=ZIVC_CL_VULKAN=1)
  ## include directories
  set(include_dirs ${kernel_set_include_dirs})
  foreach(include_dir IN LISTS include_dirs)
    list(APPEND options -I=${include_dir})
  endforeach(include_dir)
  list(APPEND options -I=@zivc_path@)
  ## Definitions
  Zivc_getZivcKernelFlags(compile_flags definitions)
  list(APPEND options ${compile_flags})
  list(APPEND definitions @kernel_set_definitions@)
  foreach(definition IN LISTS definitions)
    list(APPEND options -D=${definition})
  endforeach(definition)
  if(Z_DEBUG_MODE)
    list(APPEND options -D=Z_DEBUG_MODE=1)
  elseif(Z_RELEASE_MODE)
    list(APPEND options -D=Z_RELEASE_MODE=1)
  endif()
  if(Z_WINDOWS)
    list(APPEND options -D=Z_WINDOWS=1)
  elseif(Z_LINUX)
    list(APPEND options -D=Z_LINUX=1)
  elseif(Z_MAC)
    list(APPEND options -D=Z_MAC=1)
  endif()
  list(APPEND options -D=Z_CLANG=1) # clspv is based on clang
  ## Clspv compile options
  list(APPEND options --color
                      --cl-std=CLC++
                      --cluster-pod-kernel-args
                      --fp16
                      --fp64
                      --global-offset-push-constant
                      --inline-entry-points
                      --int8
                      # --long-vector
                      --pod-ubo
                      --spv-version=${spv_version}
                      --work-dim
                      )
  # Optimization options
  list(APPEND options -O=3
                      --cl-native-math
                      --cost-kind=throughput
                      --enable-gvn-hoist
                      --enable-gvn-memdep
                      --enable-gvn-sink
                      --enable-load-in-loop-pre
                      --enable-load-pre
                      --enable-loop-simplifycfg-term-folding
                      --enable-split-backedge-in-load-pre
                      --hot-cold-split
                      --instcombine-code-sinking
                      )
  # For debug
  list(APPEND options --debugify-level=location+variables
                      )
  # For float debug
  #  list(APPEND options --cl-denorms-are-zero
  #                      --cl-finite-math-only
  #                      --cl-no-signed-zeros
  #                      )

  # Output
  set(${clspv_compile_flags} ${options} PARENT_SCOPE)
endfunction(Zivc_getClspvCompileFlags)


function(Zivc_getClspvReflectionFlags clspv_reflection_flags)
  set(options --target-env spv${spv_version})

  # Output
  set(${clspv_reflection_flags} ${options} PARENT_SCOPE)
endfunction(Zivc_getClspvReflectionFlags)


function(Zivc_getSpirvOptOptions opt_options)
  # Strip reflection info
  set(options --strip-reflect --target-env=spv${spv_version})
  # Optimization
  list(APPEND options -O
                      --combine-access-chains
                      --local-redundancy-elimination
                      --loop-invariant-code-motion
                      --loop-unswitch
                      --remove-duplicates
                      --strength-reduction
                      --strip-debug
                      --unify-const)

  # Output
  set(${opt_options} ${options} PARENT_SCOPE)
endfunction(Zivc_getSpirvOptOptions)


function(Zivc_getKernelBakeCommand bake_command spv_file_path baked_spv_file_path)
  include("@zivc_path@/cmake/general.cmake")
  Zivc_checkTarget(KernelBaker)

  # Invoke KernelBaker
  set(command KernelBaker ${spv_file_path} ${baked_spv_file_path})
  # Add parameters
  list(APPEND command "@kernel_set_name@")
  list(APPEND command ${zstd_compression_level})

  # Output
  set(${bake_command} ${command} PARENT_SCOPE)
endfunction(Zivc_getKernelBakeCommand)


function(Zivc_prepareSpirVAnalysis target spv_org_file_path spv_file_path)
  cmake_path(GET spv_file_path PARENT_PATH spv_dir)
  cmake_path(SET spv_analysis_dir "${spv_dir}/analysis")
  file(MAKE_DIRECTORY "${spv_analysis_dir}")

  set(sub_targets "")

  # SPIR-V dis
  Zivc_findSpirvDis(spirv_dis_command)
  if(spirv_dis_command)
    set(dis_files "")
    set(spv_files "${spv_org_file_path}" "${spv_file_path}")
    foreach(spv_file IN LISTS spv_files)
      cmake_path(GET spv_file STEM LAST_ONLY file_name)
      cmake_path(SET dis_file_path "${spv_analysis_dir}/${file_name}-dis.txt")
      set(options -o ${dis_file_path})
      add_custom_command(OUTPUT "${dis_file_path}"
        COMMAND ${spirv_dis_command} ${options} "${spv_file}"
        DEPENDS "${spv_file}"
        COMMENT "Disassemble SPIR-V binary '${spv_file}'")
      list(APPEND dis_files "${dis_file_path}")
    endforeach(spv_file)
    add_custom_target(${target}_Dis DEPENDS ${dis_files})
    list(APPEND sub_targets ${target}_Dis)
  endif()

  # Create a target of the analysis
  add_custom_target(${target}
    COMMENT "Preparing analysis of kernel set '@kernel_set_name@'")
  add_dependencies(${target} ${sub_targets})
endfunction(Zivc_prepareSpirVAnalysis)


function(Zivc_initVulkanBackend target)
  # Make the output dir for Vulkan backend
  cmake_path(SET output_dir "${PROJECT_BINARY_DIR}/spv")
  set(spv_version @kernel_set_spirv_version@)

  # Get kernel inclusion code
  Zivc_makeKernelInclusionString(kernel_inclusion_lines ${kernel_set_source_files})

  # OpenCL file
  file(MAKE_DIRECTORY "${output_dir}")
  cmake_path(SET cl_file_path "${output_dir}/${set_name}.cl")
  configure_file("@kernel_set_template_dir@/kernel_set.cl.in"
                 "${cl_file_path}"
                 @ONLY)

  set(sub_targets "")
  set(clspv_output_files "")
  ## Set clspv build command
  Zivc_findClspv(clspv_command)
  Zivc_getClspvCompileFlags(clspv_options)
  cmake_path(SET spv_org_file_path "${output_dir}/${set_name}-org.spv")
  list(APPEND clspv_options -o=${spv_org_file_path})
  set(build_commands
      COMMAND ${CMAKE_COMMAND} -E echo "-- clspv"
      COMMAND ${clspv_command} ${clspv_options} ${cl_file_path})
  list(APPEND clspv_output_files "${spv_org_file_path}")
  ## Clspv descriptor map
  Zivc_findClspvReflection(reflection_command)
  Zivc_getClspvReflectionFlags(reflection_options)
  cmake_path(SET map_path "${output_dir}/${set_name}-org-descmap.csv")
  list(APPEND reflection_options -o ${map_path})
  list(APPEND build_commands
      COMMAND ${CMAKE_COMMAND} -E echo "-- clspv-reflection"
      COMMAND ${reflection_command} ${reflection_options} ${spv_org_file_path})
  list(APPEND clspv_output_files "${map_path}")
  ## Strip reflection info and optimize SPIR-V
  Zivc_findSpirvOpt(spirv_opt_command)
  Zivc_getSpirvOptOptions(opt_options)
  list(APPEND build_commands
      COMMAND ${CMAKE_COMMAND} -E echo "-- spirv-opt"
      COMMAND ${spirv_opt_command} ${opt_options} ${spv_org_file_path} -o ${spv_file_path})
  list(APPEND clspv_output_files "${spv_file_path}")
  ## Bake SPIR-V kernel into an executable
  if(ZIVC_BAKE_KERNELS)
    Zivc_getKernelBakeCommand(bake_command "${spv_file_path}" "${baked_spv_file_path}")
    list(APPEND build_commands
        COMMAND ${CMAKE_COMMAND} -E echo "-- kernel-baker"
        COMMAND ${bake_command})
    list(APPEND clspv_output_files "${baked_spv_file_path}")
  endif()
  ## Create a build command
  add_custom_command(OUTPUT ${clspv_output_files}
    ${build_commands}
    DEPENDS ${cl_file_path} ${kernel_set_source_files} @kernel_set_depends@
    COMMENT "Building CL object '${cl_file_path}'")

  ## Create a target of the vulkan backend
  set(vulkan_backend_target ${target}_SpirV)
  add_custom_target(${vulkan_backend_target}
    DEPENDS ${clspv_output_files}
    COMMENT "Preparing kernel set '@kernel_set_name@'")
  list(APPEND sub_targets ${vulkan_backend_target})

  ## SPIR-V analysis
  if(ZIVC_ENABLE_SPIRV_ANALYSIS)
    set(analysis_target ${target}_Analysis)
    Zivc_prepareSpirVAnalysis(${analysis_target} ${spv_org_file_path} ${spv_file_path})
    add_dependencies(${analysis_target} ${vulkan_backend_target})
    list(APPEND sub_targets ${analysis_target})
  endif()

  ## Make a dependency with C++ backend
  add_dependencies(${target} ${sub_targets})
endfunction(Zivc_initVulkanBackend)


macro(Zivc_setKernelSet_@kernel_set_name@Project)
  project(KernelSet_@kernel_set_name@ VERSION @kernel_set_version@ LANGUAGES CXX)

  include("@zivc_path@/cmake/general.cmake")
  include("@zivc_path@/cmake/platform.cmake")
  Zivc_getPlatformFlags(platform_definitions)
  Zivc_setVariablesOnCMake(${platform_definitions})

  # Get absolute file pathes of the given kernel files
  Zivc_getAbsoluteKernelPathes(@kernel_set_base_dir@
                               kernel_set_source_files
                               @kernel_set_source_files@)
  Zivc_getAbsoluteKernelPathes(@kernel_set_base_dir@
                               kernel_set_include_dirs
                               @kernel_set_include_dirs@)

  # SPIR-V pathes
  set(set_name ${kernel_set_prefix}-@kernel_set_name@)
  cmake_path(SET spv_file_path "${PROJECT_BINARY_DIR}/spv/${set_name}.spv")
  cmake_path(SET baked_spv_file_path "${PROJECT_BINARY_DIR}/cpp/${set_name}-bake.hpp")

  set(target ${PROJECT_NAME})
  include("@zivc_path@/cmake/kernel.cmake")
  # C++ backend
  Zivc_initCpuBackend(${target})
  # Vulkan backend
  if(ZIVC_ENABLE_VULKAN_SUB_PLATFORM)
    Zivc_initVulkanBackend(${target})
  endif()
endmacro(Zivc_setKernelSet_@kernel_set_name@Project)


##
Zivc_setKernelSet_@kernel_set_name@Project()
