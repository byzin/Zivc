/*!
  \file kernel_set-@kernel_set_name@.cpp
  \author Sho Ikeda
  \brief No brief description

  \details
  No detailed description.

  \copyright
  Copyright (c) 2015-2022 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#include "zivc/kernel_set/kernel_set-@kernel_set_name@.hpp"
// Standard C++ library
#include <array>
#include <cstddef>
#include <fstream>
#include <memory>
#include <vector>
// Zisc
#include "zisc/binary_serializer.hpp"
#include "zisc/utility.hpp"
#include "zisc/memory/std_memory_resource.hpp"
// Zivc
#include "zivc/kernel_set.hpp"
#include "zivc/zivc_config.hpp"
#include "zivc/auxiliary/error.hpp"
#include "zivc/internal/zstd.hpp"

namespace {

#if defined(ZIVC_BAKE_KERNELS)

#include "@baked_spv_file_path@"

//! Allocate a memory
void* allocateMemory(void* opaque, size_t size)
{
  auto mem_resource = zisc::cast<zisc::pmr::memory_resource*>(opaque);
  void* address = mem_resource->allocate(size);
  return address;
}

//! Deallocate a memory
void freeMemory(void* opaque, void* address)
{
  auto mem_resource = zisc::cast<zisc::pmr::memory_resource*>(opaque);
  const std::size_t size = 0; //! \todo Retrieve the actual memory size
  mem_resource->deallocate(address, size);
}

/*!
  \details No detailed description

  \param [out] spirv_code_out No description.
  */
void loadBakedSpirvCode(zisc::pmr::vector<zivc::uint32b>* spirv_code_out)
{
  using BakedKernelSet = BakedKernelSet_@kernel_set_name@;
  constexpr std::size_t expected_raw_size = BakedKernelSet::rawSize();
  static_assert((expected_raw_size % 4) == 0,
                "The size of the SPIR-V code isn't valid.");

  zisc::pmr::polymorphic_allocator alloc = spirv_code_out->get_allocator();
  zisc::pmr::memory_resource* mem_resource = alloc.resource();

  // Get the raw size of the SPIR-V code
  constexpr std::array encoded_code = BakedKernelSet::encodedData();
  static_assert(encoded_code.size() == BakedKernelSet::size(),
                "The size of the encoded SPIR-V code isn't valid.");
  std::size_t raw_size = ZSTD_getFrameContentSize(encoded_code.data(),
                                                  encoded_code.size());
  ZIVC_ASSERT(raw_size == expected_raw_size,
              "The header of the encoded kernel set isn't valid.");

  // Create a Zstd context
  ZSTD_customMem mem{allocateMemory, freeMemory, mem_resource};
  ZSTD_DCtx* context = ZSTD_createDCtx_advanced(mem);

  // Decompress the SPIR-V code
  spirv_code_out->resize(raw_size / 4);
  raw_size = ZSTD_decompressDCtx(context,
                                 spirv_code_out->data(),
                                 raw_size,
                                 encoded_code.data(),
                                 encoded_code.size());

  ZSTD_freeDCtx(context);
}

#else // ZIVC_BAKE_KERNELS

/*!
  \details No detailed description

  \param [out] spirv_code_out No description.
  */
void loadSpirvCodeFile(zisc::pmr::vector<zivc::uint32b>* spirv_code_out)
{
  std::ifstream spv_file{"@spv_file_path@", std::ios_base::binary};
  ZIVC_ASSERT(spv_file.is_open(), "The SPIR-V file not found.");
  const std::streamsize spv_size = zisc::BSerializer::getDistance(&spv_file);
  ZIVC_ASSERT((spv_size % 4) == 0, "The size of the SPIR-V code isn't valid.");
  spirv_code_out->resize(zisc::cast<std::size_t>(spv_size / 4));
  spv_file.read(reinterpret_cast<char*>(spirv_code_out->data()), spv_size);
}

#endif // ZIVC_BAKE_KERNELS

} // namespace

namespace zivc::kernel_set {

// Type alias
using KernelSetT = KernelSet_@kernel_set_name@;

/*!
  \details No detailed description

  \param [in,out] mem_resource No description.
  */
KernelSetT::KernelSet_@kernel_set_name@(zisc::pmr::memory_resource* mem_resource) noexcept :
    KernelSet(mem_resource)
{
}

/*!
  \details No detailed description

  \param [out] spirv_code_out No description.
  */
void KernelSetT::loadSpirVCode(zisc::pmr::vector<uint32b>* spirv_code_out)
{
  static_assert(sizeof(uint32b) == 4, "The size of the code element isn't 4.");
#if defined(ZIVC_BAKE_KERNELS)
  ::loadBakedSpirvCode(spirv_code_out);
#else // ZIVC_BAKE_KERNELS
  ::loadSpirvCodeFile(spirv_code_out);
#endif // ZIVC_BAKE_KERNELS
}

} // namespace zivc::kernel_set
