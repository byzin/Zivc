/*!
  \file @kernel_set_name@.cl
  \author Sho Ikeda
  \brief No brief description

  \details
  No detailed description.

  \copyright
  Copyright (c) 2015-2023 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#ifndef ZIVC_KERNEL_SET_@kernel_set_name@_CL
#define ZIVC_KERNEL_SET_@kernel_set_name@_CL 0x@kernel_set_number@u

// OpenCL feature
//#pragma OPENCL EXTENSION __cl_clang_non_portable_kernel_param_types : enable

// Warning
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++98-compat"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++98-c++11-compat-pedantic"
//#pragma clang diagnostic push
//#pragma clang diagnostic ignored "-Wc++98-c++11-c++14-compat-pedantic"

/*!
  \brief This function is defined for enabling all pushconstant values used in clspv
  \details No detailed description

  \param [out] outputs No description.

  \note This function should neber be invoked
  */
__kernel void zivcClspvInitKernel(__global uint* outputs)
{
  size_t i = 0;
  outputs[i++] = get_work_dim();
  outputs[i++] = get_global_size(0);
  outputs[i++] = get_global_size(1);
  outputs[i++] = get_global_size(2);
  outputs[i++] = get_global_id(0);
  outputs[i++] = get_global_id(1);
  outputs[i++] = get_global_id(2);
  outputs[i++] = get_local_size(0);
  outputs[i++] = get_local_size(1);
  outputs[i++] = get_local_size(2);
  outputs[i++] = get_enqueued_local_size(0);
  outputs[i++] = get_enqueued_local_size(1);
  outputs[i++] = get_enqueued_local_size(2);
  outputs[i++] = get_local_id(0);
  outputs[i++] = get_local_id(1);
  outputs[i++] = get_local_id(2);
  outputs[i++] = get_num_groups(0);
  outputs[i++] = get_num_groups(1);
  outputs[i++] = get_num_groups(2);
  outputs[i++] = get_group_id(0);
  outputs[i++] = get_group_id(1);
  outputs[i++] = get_group_id(2);
  outputs[i++] = get_global_offset(0);
  outputs[i++] = get_global_offset(1);
  outputs[i++] = get_global_offset(2);
  outputs[i++] = get_global_linear_id();
  outputs[i++] = get_local_linear_id();
  outputs[i++] = get_sub_group_size();
  outputs[i++] = get_max_sub_group_size();
  outputs[i++] = get_num_sub_groups();
  outputs[i++] = get_enqueued_num_sub_groups();
  outputs[i++] = get_sub_group_id();
  outputs[i++] = get_sub_group_local_id();
}

// Definitions

/*!
  \def ZIVC_CL_GLOBAL_NAMESPACE
  \brief No brief description

  No detailed description.
  */
#define ZIVC_CL_GLOBAL_NAMESPACE

// Main kernels
#include "zivc/cl/types.hpp"
@kernel_inclusion_lines@

// Unset definitions
#if defined(ZIVC_CL_GLOBAL_NAMESPACE) // The check is for avoiding unused macro warning
#undef ZIVC_CL_GLOBAL_NAMESPACE
#endif /* ZIVC_CL_GLOBAL_NAMESPACE */

static_assert(ZIVC_KERNEL_SET_@kernel_set_name@_CL == 0x@kernel_set_number@u,
              "The ID number of the kernel set isn't valid.");
static_assert(__OPENCL_VERSION__ == CL_VERSION_1_2, "OpenCL version isn't 2.0.");
static_assert(__OPENCL_CPP_VERSION__ == 100, "OpenCL C++ version isn't 1.0.");

// Warning
//#pragma clang diagnostic pop
#pragma clang diagnostic pop
#pragma clang diagnostic pop

// OpenCL feature
//#pragma OPENCL EXTENSION __cl_clang_non_portable_kernel_param_types : disable

#endif /* ZIVC_KERNEL_SET_@kernel_set_name@_CL */
