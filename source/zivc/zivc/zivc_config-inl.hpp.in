/*!
  \file zivc_config-inl.hpp
  \author Sho Ikeda
  \brief No brief description

  \details
  No detailed description.

  \copyright
  Copyright (c) 2015-2021 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#ifndef ZIVC_CONFIG_INL_HPP
#define ZIVC_CONFIG_INL_HPP

#include "zivc/zivc_config.hpp"
// Standard C++ library
#include <string_view>
#include <type_traits>
// Zisc
#include "zisc/utility.hpp"

namespace zivc {

static_assert(sizeof(int8b) == 1, "The size of int8b is wrong.");
static_assert(sizeof(int16b) == 2, "The size of int16b is wrong.");
static_assert(sizeof(int32b) == 4, "The size of int32b is wrong.");
static_assert(sizeof(int64b) == 8, "The size of int64b is wrong.");
static_assert(sizeof(uint8b) == 1, "The size of uint8b is wrong.");
static_assert(sizeof(uint16b) == 2, "The size of uint16b is wrong.");
static_assert(sizeof(uint32b) == 4, "The size of uint32b is wrong.");
static_assert(sizeof(uint64b) == 8, "The size of uint64b is wrong.");

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr bool Config::isVulkanSubPlatformEnabled() noexcept
{
  const bool is_enabled =
#if defined(ZIVC_ENABLE_VULKAN_SUB_PLATFORM)
      true;
#else // ZIVC_ENABLE_VULKAN_SUB_PLATFORM
      false;
#endif // ZIVC_ENABLE_VULKAN_SUB_PLATFORM
  return is_enabled;
}

/*!
  \details No detailed description

  \return No description
  */
//inline
//constexpr int32b Config::scalarResultFalse() noexcept
//{
//  const int32b result = 0b0;
//  return result;
//}

/*!
  \details No detailed description

  \return No description
  */
//inline
//constexpr int32b Config::scalarResultTrue() noexcept
//{
//  const int32b result = 0b1;
//  return result;
//}

/*!
  \details No detailed description

  \tparam Type No description.
  \return No description
  */
template <typename Type> inline
constexpr auto Config::vecResultFalse() noexcept -> ComparisonResultType<Type>
{
  const ComparisonResultType<Type> result = 0b0;
  return result;
}

/*!
  \details No detailed description

  \tparam Type No description.
  \return No description
  */
template <typename Type> inline
constexpr auto Config::vecResultTrue() noexcept -> ComparisonResultType<Type>
{
  const auto zero = Config::vecResultFalse<Type>();
  const ComparisonResultType<Type> result = ~zero;
  return result;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr int Config::versionMajor() noexcept
{
  return @PROJECT_VERSION_MAJOR@;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr int Config::versionMinor() noexcept
{
  return @PROJECT_VERSION_MINOR@;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr int Config::versionPatch() noexcept
{
  return @PROJECT_VERSION_PATCH@;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr std::string_view Config::versionString() noexcept
{
  constexpr auto version_str = "@PROJECT_VERSION@";
  const std::string_view version{version_str};
  return version;
}

} // namespace zivc

#endif // ZIVC_CONFIG_INL_HPP
